makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x = c(4,6)
makeVector(x)
x <- c(4,6)
y <- makeVector(x)
y
cache <- cachemean(x)
cache <- cachemean(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {
x
}
setinv <- function(invers){
inv <<- invers
}
getinv <- function(){
inv
}
lis (set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
x <- matrix(c(2,0,1,3,0,0,5,1,1), nrow = 3, ncol = 3, byrow = TRUE)
x
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {
x
}
setinv <- function(invers){
inv <<- invers
}
getinv <- function(){
inv
}
list (set = set, get = get, setinv = setinv, getinv = getinv)
}
makeCacheMatrix(x)
y <- makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(y)
cacheSolve(y)
